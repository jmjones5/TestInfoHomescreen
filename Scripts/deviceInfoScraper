#!/usr/bin/env ruby
require "pathname"
require "sqlite3"
require "json"
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] [Xcode path]"
  opts.separator ""
  opts.separator "A tool to collate and verify all device type to device descriptions from an Xcode installation."
  opts.separator ""

  opts.on("-v [PATH]", "--verify [PATH]", "Verify device info matches against provided path") do |v|
    options[:verify] = v ? v : "deviceInfo.json" 
  end

  opts.on("-e", "--error", "Error on failed verification. Default is to spit out a warning") do |e|
    options[:error] = e
  end

  opts.on("-x", "--xcode-path PATH", "Manually set Xcode path. Defaults to using Xcode-select path if not specified") do |x|
    options[:xcodePath] = x
  end
  
  opts.on("-o PATH", "-o", "--output-path PATH", "--output-path", "Output path") do |o|
    options[:outputPath] = o
  end
end.parse!

xcodePath       = (options[:xcodePath] ? options[:xcodePath] : `xcode-select -p`).chomp
platformRootDir = xcodePath + "/Platforms"

deviceLookup = {
  :checksum => "",
  :devices => {}
}
 
Pathname.new(platformRootDir).each_child do |filename|
  deviceTraitsFile = filename + "usr/standalone/device_traits.db"
  next unless deviceTraitsFile.exist?

  deviceLookup[:checksum] = deviceLookup[:checksum] + `openssl sha256 #{deviceTraitsFile}`.split(" ").last

  unless options[:verify]
    SQLite3::Database.new deviceTraitsFile.to_s do |db| 
      db.results_as_hash = true
      db.execute("SELECT * FROM Devices") do |row|
        deviceLookup[:devices][row["ProductType"]] = row["ProductDescription"] 
      end
    end
  end
end

if options[:verify]
  json = JSON.parse(File.read(options[:verify]))

  shouldError    = options[:error]
  checksumFailed = json["checksum"] != deviceLookup[:checksum]
  puts "#{shouldError ? "error" : "warning"}: device info checksum does not match" if checksumFailed
  exit checksumFailed && shouldError ? 1 : 0
else
  directoryPath = options[:outputPath] ? options[:outputPath].chomp("/") + "/" : ""
  FileUtils.mkdir_p(directoryPath) unless File.directory?(directoryPath) || directoryPath == ""

  File.open(directoryPath + "deviceInfo.json", "w") do |f|
    f.write(JSON.pretty_generate(deviceLookup))
  end
end
